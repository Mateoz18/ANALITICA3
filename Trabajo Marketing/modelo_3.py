# -*- coding: utf-8 -*-
"""Modelo_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bOT25J8-M78u9r9Et_EGx-_rOD93fW5P
"""

import numpy as np
import pandas as pd
import sqlite3 as sql
import plotly.graph_objs as go ### para gráficos
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from ipywidgets import interact ## para análisis interactivo
from sklearn import neighbors ### basado en contenido un solo producto consumido
import joblib
from sklearn.neighbors import NearestNeighbors

# Conexion con Drive
from google.colab import drive
drive.mount('/content/drive')

# Cambio de directorio de Trabajo
import os
import sys
path = '/content/drive/MyDrive/Mod2/ANALITICA3'
os.chdir(path)
sys.path.append(path)

import sqlite3 as sql
import pandas as pd
import numpy as np

conn=sql.connect('/content/drive/MyDrive/Mod2/ANALITICA3/data/db_movies')
cur=conn.cursor() ###para funciones que ejecutan sql en base de datos

### para verificar las tablas que hay disponibles
cur.execute("SELECT name FROM sqlite_master where type='table' ")
cur.fetchall()

# Cargas la tabla que ya contiene los datos procesados
tabla_completa = pd.read_sql_query("SELECT * FROM full_ratings", conn)

tabla_completa

"""**modelo de similitud**"""

movie_user_matrix = tabla_completa.pivot_table(index='movie_title', columns='user_id', values='movie_rating').fillna(0)

# Ajustar el modelo KNN
model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
model_knn.fit(movie_user_matrix.values)

# Para cada película, obtener los índices de las películas similares
distances, indices = model_knn.kneighbors(movie_user_matrix.values, n_neighbors=6)  # 6 incluye la propia película

# Guardar solo los 5 vecinos más cercanos (excluyendo la misma)
idlist = [idx[1:] for idx in indices]

def MovieRecommender(movie_name=list(movie_user_matrix.index)):
    movie_index = movie_user_matrix.index.get_loc(movie_name)
    similar_movies = [movie_user_matrix.index[i] for i in idlist[movie_index]]
    return similar_movies

interact(MovieRecommender)